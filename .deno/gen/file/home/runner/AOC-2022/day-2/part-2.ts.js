function translate(key) {
    return ({
        'X': 'A',
        'Y': 'B',
        'Z': 'C'
    })[key];
}
const input = await Deno.readTextFile("./input.txt");
const rounds = input.split("\n");
let totalScore = 0;
export function bestChoice(opposite, situation) {
    if (situation === 'Y') {
        return opposite;
    }
    if (situation === 'X') {
        if (opposite === 'A') {
            return 'C';
        }
        if (opposite === 'B') {
            return 'A';
        }
        if (opposite === 'C') {
            return 'B';
        }
    }
    if (situation === 'Z') {
        if (opposite == 'A') {
            return 'B';
        }
        if (opposite == 'B') {
            return 'C';
        }
        if (opposite == 'C') {
            return 'A';
        }
    }
}
rounds.forEach((round) => {
    let [opposite, situation] = round.split(" ");
    let me = translate(situation);
    let score = 0;
    if (situation === "X")
        score += 0;
    if (situation === "Y")
        score += 3;
    if (situation === "Z")
        score += 6;
    let situationChoice = bestChoice(opposite, situation);
    if (situationChoice === 'A')
        score += 1;
    if (situationChoice === 'B')
        score += 2;
    if (situationChoice === 'C')
        score += 3;
    totalScore += score;
});
console.log(totalScore);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsZTovLy9ob21lL3J1bm5lci9BT0MtMjAyMi9kYXktMi9wYXJ0LTIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxTQUFTLENBQUMsR0FBVztJQUM1QixPQUFPLENBQUM7UUFDTixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7S0FDVCxDQUFDLENBQUMsR0FBRyxDQUFXLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRWpDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVuQixNQUFNLFVBQVUsVUFBVSxDQUFDLFFBQWdCLEVBQUUsU0FBaUI7SUFDNUQsSUFBRyxTQUFTLEtBQUssR0FBRyxFQUFFO1FBQ3BCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsSUFBRyxTQUFTLEtBQUssR0FBRyxFQUFFO1FBQ3BCLElBQUcsUUFBUSxLQUFLLEdBQUcsRUFBQztZQUNsQixPQUFPLEdBQUcsQ0FBQTtTQUNYO1FBQ0QsSUFBRyxRQUFRLEtBQUssR0FBRyxFQUFDO1lBQ2xCLE9BQU8sR0FBRyxDQUFBO1NBQ1g7UUFDRCxJQUFHLFFBQVEsS0FBSyxHQUFHLEVBQUM7WUFDbEIsT0FBTyxHQUFHLENBQUE7U0FDWDtLQUNGO0lBQ0QsSUFBRyxTQUFTLEtBQUssR0FBRyxFQUFDO1FBQ25CLElBQUcsUUFBUSxJQUFJLEdBQUcsRUFBQztZQUNsQixPQUFPLEdBQUcsQ0FBQztTQUNYO1FBQ0QsSUFBRyxRQUFRLElBQUksR0FBRyxFQUFDO1lBQ2xCLE9BQU8sR0FBRyxDQUFDO1NBQ1g7UUFDRCxJQUFHLFFBQVEsSUFBSSxHQUFHLEVBQUM7WUFDbEIsT0FBTyxHQUFHLENBQUM7U0FDWDtLQUNGO0FBQ0gsQ0FBQztBQUlELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN2QixJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTlCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUVkLElBQUksU0FBUyxLQUFLLEdBQUc7UUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ2xDLElBQUksU0FBUyxLQUFLLEdBQUc7UUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ2xDLElBQUksU0FBUyxLQUFLLEdBQUc7UUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO0lBRWxDLElBQUksZUFBZSxHQUFHLFVBQVUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFdEQsSUFBRyxlQUFlLEtBQUssR0FBRztRQUFFLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDdkMsSUFBRyxlQUFlLEtBQUssR0FBRztRQUFFLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDdkMsSUFBRyxlQUFlLEtBQUssR0FBRztRQUFFLEtBQUssSUFBSSxDQUFDLENBQUM7SUFFdEMsVUFBVSxJQUFJLEtBQUssQ0FBQTtBQUN0QixDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0cmFuc2xhdGUoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gKHtcbiAgICAnWCc6ICdBJyxcbiAgICAnWSc6ICdCJyxcbiAgICAnWic6ICdDJ1xuICB9KVtrZXldIGFzIHN0cmluZztcbn1cblxuY29uc3QgaW5wdXQgPSBhd2FpdCBEZW5vLnJlYWRUZXh0RmlsZShcIi4vaW5wdXQudHh0XCIpO1xuY29uc3Qgcm91bmRzID0gaW5wdXQuc3BsaXQoXCJcXG5cIik7XG5cbmxldCB0b3RhbFNjb3JlID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJlc3RDaG9pY2Uob3Bwb3NpdGU6IHN0cmluZywgc2l0dWF0aW9uOiBzdHJpbmcpe1xuICBpZihzaXR1YXRpb24gPT09ICdZJykge1xuICAgIHJldHVybiBvcHBvc2l0ZTtcbiAgfVxuICBpZihzaXR1YXRpb24gPT09ICdYJykge1xuICAgIGlmKG9wcG9zaXRlID09PSAnQScpe1xuICAgICAgcmV0dXJuICdDJyBcbiAgICB9XG4gICAgaWYob3Bwb3NpdGUgPT09ICdCJyl7XG4gICAgICByZXR1cm4gJ0EnXG4gICAgfVxuICAgIGlmKG9wcG9zaXRlID09PSAnQycpe1xuICAgICAgcmV0dXJuICdCJ1xuICAgIH1cbiAgfVxuICBpZihzaXR1YXRpb24gPT09ICdaJyl7XG4gICAgaWYob3Bwb3NpdGUgPT0gJ0EnKXtcbiAgICAgcmV0dXJuICdCJzsgXG4gICAgfVxuICAgIGlmKG9wcG9zaXRlID09ICdCJyl7XG4gICAgIHJldHVybiAnQyc7IFxuICAgIH1cbiAgICBpZihvcHBvc2l0ZSA9PSAnQycpe1xuICAgICByZXR1cm4gJ0EnOyBcbiAgICB9XG4gIH1cbn1cblxuXG5cbnJvdW5kcy5mb3JFYWNoKChyb3VuZCkgPT4ge1xuICBsZXQgW29wcG9zaXRlLCBzaXR1YXRpb25dID0gcm91bmQuc3BsaXQoXCIgXCIpO1xuICBsZXQgbWUgPSB0cmFuc2xhdGUoc2l0dWF0aW9uKTtcblxuICBsZXQgc2NvcmUgPSAwO1xuXG4gIGlmIChzaXR1YXRpb24gPT09IFwiWFwiKSBzY29yZSArPSAwO1xuICBpZiAoc2l0dWF0aW9uID09PSBcIllcIikgc2NvcmUgKz0gMztcbiAgaWYgKHNpdHVhdGlvbiA9PT0gXCJaXCIpIHNjb3JlICs9IDY7XG5cbiAgbGV0IHNpdHVhdGlvbkNob2ljZSA9IGJlc3RDaG9pY2Uob3Bwb3NpdGUsIHNpdHVhdGlvbik7XG5cbiAgaWYoc2l0dWF0aW9uQ2hvaWNlID09PSAnQScpIHNjb3JlICs9IDE7XG4gIGlmKHNpdHVhdGlvbkNob2ljZSA9PT0gJ0InKSBzY29yZSArPSAyO1xuICBpZihzaXR1YXRpb25DaG9pY2UgPT09ICdDJykgc2NvcmUgKz0gMztcblxuICAgdG90YWxTY29yZSArPSBzY29yZVxufSk7XG5cbmNvbnNvbGUubG9nKHRvdGFsU2NvcmUpIl19